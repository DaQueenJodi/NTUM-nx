<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRayBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mskBullet1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*THIS IS HOW IT SHOULD WORK

damagers have a DAMAGE
their collision can be NORMAL, PIERCING or PIERCING AT OVERKILL (piercing checks per frame)
their type can be 0, DEFLECTABLE, DESTRUCTABLE or DEFLECTORS
they have a FORCE and can be 0 or DIRECTIONAL */

typ = 0 //0 = normal, 1 = deflectable, 2 = destructable, 3 = deflectable
explosive=1;
direction=point_direction(x,y,mouse_x,mouse_y);
x=Player.x+lengthdir_x(16,direction);
y=Player.y+lengthdir_y(16,direction);
xx=x;
yy=y;
xxPrevious=xx;
xxPrevious=yy;
var i;
hue=random(225);
target=instance_nearest(x+lengthdir_x(80,direction),y+lengthdir_y(80,direction),enemy);
if(instance_exists(target) ){
Direction=point_direction(x,y,target.x,target.y);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ammo -= 1

alarm[0] = time

if instance_exists(creator)
{
x = creator.x
y = creator.y
//snd_play(sndJackHammer)
//FIRING
if(instance_exists(target))
{
if(instance_exists(Player)){

    if (point_distance(x,y,target.x,target.y) &lt; 120+(60*Player.skill_got[19])&amp;&amp; Direction&gt;direction-30-(30*Player.skill_got[19])&amp;&amp;Direction&lt;direction+30+(30*Player.skill_got[19]) )
    {
        if!(collision_line(x,y,target.x,target.y,Wall,false,true) )//No walls between player and target?
        {
            if(explosive==2)
            {
            with instance_create(target.x,target.y,Morph)
            scrCanHumphry(); 
            }
            if(explosive==3){
            with instance_create(target.x,target.y,ExplosiveMorph)
            scrCanHumphry(); }
        }
            
    }}
}

BackCont.viewx2 += lengthdir_x(2,point_direction(x,y,mouse_x,mouse_y)+180)*UberCont.opt_shake
BackCont.viewy2 += lengthdir_y(2,point_direction(x,y,mouse_x,mouse_y)+180)*UberCont.opt_shake
//BackCont.shake += 1
wkick = 2}


if ammo = 0

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(creator)){
x=creator.x+lengthdir_x(16,direction);
y=creator.y+lengthdir_y(16,direction);
direction=point_direction(x,y,mouse_x,mouse_y);
image_angle=direction;
target=instance_nearest(x+lengthdir_x(80,direction),y+lengthdir_y(80,direction),enemy);
if(instance_exists(target) ){
Direction=point_direction(x,y,target.x,target.y);}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
xx=x;
yy=y;
xxPrevious=xx;
xxPrevious=yy;
*/

if(instance_exists(target))
{
//////draw_circle(target.x,target.y,12,1);
//instance_nearest(x+lengthdir_x(80,direction),y+lengthdir_y(80,direction),enemy);

if(instance_exists(Player)){
if (point_distance(x,y,target.x,target.y) &lt; 120+(60*Player.skill_got[19])&amp;&amp; Direction&gt;direction-30-(30*Player.skill_got[19])&amp;&amp;Direction&lt;direction+30+(30*Player.skill_got[19]) )//Check if target is close to player and within the margin of the cursors direction
{

if!(collision_line(x,y,target.x,target.y,Wall,false,true) )//No walls in between player and target?
{
    points=10;
    distance=distance_to_object(target);
    
    repeat(5){
    xx=x;
    yy=y;
        for(i=0; i&lt;points+2; i+=1;)
        {
        hue=random(225);
        //distance=distance_to_object(target);
        xxPrevious=xx;
        yyPrevious=yy;
        xx=xx+lengthdir_x(distance/points,Direction+(random(60)-30) )
        yy=yy+lengthdir_y(distance/points,Direction+(random(60)-30) );
        draw_line_width_color(xxPrevious,yyPrevious,xx,yy,2,make_color_hsv(hue,225,225),make_color_hsv(hue,225,255) );
        }
        draw_line_width_color(xx,yy,xx+lengthdir_x(distance/points+8,Direction),yy+lengthdir_y(distance/points+8,Direction),2,make_color_hsv(hue,225,225),make_color_hsv(hue,10,225) )//always land correct
    }
}}
    points=10;
    distance=10+random(30);//distance_to_object(target);
    Direction=point_direction(x,y,mouse_x,mouse_y)+random(10)-5;
    repeat(5){
    xx=x;
    yy=y;
        for(i=0; i&lt;points+2; i+=1;)
        {
        hue=random(225);
        //distance=distance_to_object(target);
        xxPrevious=xx;
        yyPrevious=yy;
        xx=xx+lengthdir_x(distance/points,Direction+(random(60)-30) )
        yy=yy+lengthdir_y(distance/points,Direction+(random(60)-30) );
        draw_line_width_color(xxPrevious,yyPrevious,xx,yy,2,make_color_hsv(hue,225,225),make_color_hsv(hue,225,255) );
        }
        draw_line_width_color(xx,yy,xx+lengthdir_x(distance/points+8,Direction),yy+lengthdir_y(distance/points+8,Direction),2,make_color_hsv(hue,225,225),make_color_hsv(hue,10,225) )//always land correct
    }
}
}
else{


    points=10;
    distance=10+random(30);//distance_to_object(target);
    Direction=point_direction(x,y,mouse_x,mouse_y)+random(10)-5;
    repeat(5){
    xx=x;
    yy=y;
        for(i=0; i&lt;points+2; i+=1;)
        {
        hue=random(225);
        //distance=distance_to_object(target);
        xxPrevious=xx;
        yyPrevious=yy;
        xx=xx+lengthdir_x(distance/points,Direction+(random(60)-30) )
        yy=yy+lengthdir_y(distance/points,Direction+(random(60)-30) );
        draw_line_width_color(xxPrevious,yyPrevious,xx,yy,2,make_color_hsv(hue,225,225),make_color_hsv(hue,225,255) );
        }
        draw_line_width_color(xx,yy,xx+lengthdir_x(distance/points+8,Direction),yy+lengthdir_y(distance/points+8,Direction),2,make_color_hsv(hue,225,225),make_color_hsv(hue,10,225) )//always land correct
    }
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
