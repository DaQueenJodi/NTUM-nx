<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-101</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fishx = room_width/2
fishy = room_height/2

image_angle = random(1000)
active = 0

type = 1
//1 = normal 2 = proto 3 = idpd 4= venuz
time = 0

if instance_exists(Player)
{
if Player.area = 100
type = 2
if Player.area = 103
type = 4
if Player.area = 105|| Player.area = 106
type=5;
}

HQ =  UberCont.opt_highquality


if HQ=1
{
repeat(60)//(200)
{
with SpiralCont
event_perform(ev_step,0)

with Spiral
event_perform(ev_step,0)

with SpiralDebris
event_perform(ev_step,0)

with SpiralStar
event_perform(ev_step,0)
}
}

active = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if type = 2
image_angle += 2+sin(image_angle/300)*2+random(1)
else if type = 5
image_angle += 8-sin(image_angle/300)*1
else
image_angle += 8+sin(image_angle/300)*1

time += 1

if type = 2
{
x = room_width/2+sin(image_angle/921)*sin(image_angle/500)*70+sin(image_angle/30)*(20+sin(image_angle/40)*5)+random(2)-1
y = room_height/2+cos(image_angle/583)*sin(image_angle/500)*40+cos(image_angle/30)*(20+sin(image_angle/40)*5)+random(2)-1
}
else
{
x = room_width/2+sin(image_angle/921)*sin(image_angle/500)*80
y = room_height/2+cos(image_angle/583)*sin(image_angle/500)*50
}

if type = 4{
x = room_width/2
y = room_height/2}

if random(4) &lt; 1 and type != 4 &amp;&amp; HQ=1
{
if type = 2 or (random(3) &lt; 1)
{
with instance_create(x,y,SpiralDebris)
depth = other.image_angle
}
}


if type = 4 &amp;&amp; HQ=1
{
instance_create(x,y,SpiralStar)
}
else if HQ=1
{
with instance_create(x,y,Spiral)
{
image_xscale = 0
image_yscale = 0
depth = other.image_angle
image_angle = other.image_angle
if other.type = 3
{
sprite_index = sprSpiralIDPD
if round(other.time/10) = other.time/10 or round((other.time-1)/10) = (other.time-1)/10
sprite_index = sprSpiralIDPD2
}
if other.type = 2
{
image_xscale = random(0.01)
image_yscale = random(0.01)
sprite_index = sprSpiralProto
image_angle = other.image_angle
//image_angle = random(360)
}
if other.type = 5
{
sprite_index = sprSpiralInverted
//image_angle = random(360)
}
}
}

if !instance_exists(LevCont) and !instance_exists(GenCont) and active = 1
instance_destroy()


















/*
if type = 2
image_angle += 8+sin(image_angle/300)*1
//image_angle += 6+sin(image_angle/300)*2+random(1)
else
image_angle += 8+sin(image_angle/300)*1

time += 1

if type = 2
{
x =room_width/2-sin(image_angle/921)*sin(image_angle/500)*80
y = room_height/2-cos(image_angle/583)*sin(image_angle/500)*50
//x = room_width/2+sin(image_angle/921)*sin(image_angle/500)*75+sin(image_angle/60)*(20+sin(image_angle/40)*5)+random(2)-1*-1
//y = room_height/2+cos(image_angle/583)*sin(image_angle/500)*45+cos(image_angle/60)*(20+sin(image_angle/40)*5)+random(2)-1*-1
}
else
{
x = room_width/2+sin(image_angle/921)*sin(image_angle/500)*80
y = room_height/2+cos(image_angle/583)*sin(image_angle/500)*50
}

if type = 4{
x = room_width/2
y = room_height/2}

if random(4) &lt; 1 and type != 4
{
if type = 2 or (random(3) &lt; 1)
{
with instance_create(x,y,SpiralDebris)
depth = other.image_angle
}
}


if type = 4
{
instance_create(x,y,SpiralStar)
}
else
{
with instance_create(x,y,Spiral)
{
image_xscale = 0
image_yscale = 0
depth = other.image_angle
image_angle = other.image_angle
if other.type = 3
{
sprite_index = sprSpiralIDPD
if round(other.time/10) = other.time/10 or round((other.time-1)/10) = (other.time-1)/10
sprite_index = sprSpiralIDPD2
}
if other.type = 2
{
image_xscale = random(0.01)
image_yscale = random(0.01)
sprite_index = sprSpiralProto
image_angle = other.image_angle
//image_angle = random(360)
}
}
}

if !instance_exists(LevCont) and !instance_exists(GenCont) and active = 1
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
