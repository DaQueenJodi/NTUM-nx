<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//WORK IN PROGRESS&lt; GOTTA START USING REPLACE AND FIX THE MEMORY LEAKS

//DO YOU WANT MUSIC?
wantmusic = 1

//REAL STUFF
area = 0


audio_stop_all();

song = musThemeA;
amb = amb0;
snd_play(song)
snd_loop(amb)
alarm[0] = 1360
snd_play(sndRestart)

//if file_exists("nomusic.txt") or file_exists("NOMUSIC.txt") or file_exists("NOMUSIC.TXT") or file_exists("nomusic.TXT")
//wantmusic = 0
//JW HACK:
//if UberCont.public = 0 wantmusic=1
//wantmusic = 1

if wantmusic = 0 {instance_destroy() exit;}

audio_master_gain(max(0,sqrt(UberCont.opt_sfxvol)))

audio_sound_gain(song,max(0,sqrt(UberCont.opt_musvol)),0);

audio_sound_gain(amb,max(0,sqrt(UberCont.opt_ambvol)),0);

audio_sound_gain(sndBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
/* OLD Gamemaker down here can suck my kuk fuck that shit
//sound_global_volume(max(0,sqrt(UberCont.opt_sfxvol)))
sound_volume(song,max(0,sqrt(UberCont.opt_musvol)))
sound_volume(amb,max(0,sqrt(UberCont.opt_ambvol)))
sound_volume(sndBossWin,max(0,sqrt(UberCont.opt_musvol)))
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//optimise sound_discard(song)
//optimise sound_discard(amb)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
audio_stop_all()

song=musThemeB;

snd_play(song)
snd_loop(amb)


audio_master_gain(max(0,sqrt(UberCont.opt_sfxvol)))

audio_sound_gain(song,max(0,sqrt(UberCont.opt_musvol)),0);

audio_sound_gain(amb,max(0,sqrt(UberCont.opt_ambvol)),0);

audio_sound_gain(sndBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//silly stuff
/*
if sound_exists(amb)
{if instance_exists(LevCont) or instance_exists(GenCont) and instance_exists(Player)
{
//optimise sound_effect_set(amb,se_equalizer)
//optimise sound_effect_equalizer(amb,14000,36,-15)
}
else
{
//optimise sound_effect_set(amb,se_none)
}}

//sound_global_volume(max(0,sqrt(UberCont.opt_sfxvol)))
//sound_volume(song,max(0,sqrt(UberCont.opt_musvol)))
//sound_volume(amb,max(0,sqrt(UberCont.opt_ambvol)))
//sound_volume(sndBossWin,max(0,sqrt(UberCont.opt_musvol)))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oldarea = area
if instance_exists(Player)
{
area = Player.area
alarm[0] = 0
}

if oldarea != area or !audio_is_playing(song) or !audio_exists(song)
{

dir = 1
deaths = 0
repeat(UberCont.racemax)
deaths += UberCont.ctot_dead[dir]



audio_stop_all()


if area = 0
{

song = musThemeA;

amb = amb0;
}
if area = 1
{

if deaths &gt; 50 and random(20) &lt; 1
song = mus1b;
else
song = mus1;

amb = amb1;
}
if area = 105//inverted desert
{

song = mus1b;

amb = amb1;
}
if area = 2
{

song = mus2;

amb = amb2;
}
if area = 110
{

song = musInvertedSewers;

amb = amb2;
}
if area = 3
{

if deaths &gt; 50 and random(20) &lt; 1
song = mus3b;
else
song = mus3;

amb = amb3;
}
if area = 4
{

song = mus4;

amb = amb4;
}
if area = 5
{

if deaths &gt; 50 and random(20) &lt; 1
song = mus5b;
else
song = mus5;

amb = amb5;
}
if area = 6
{

song = mus6;

amb = amb6;
}
if area = 7
{

song = musVulcano;//mus5b;

amb = amb0;
}
if area = 108 || area = 109//inverted vulcano inverted wonderland
{

song = mus7b;

amb = amb5;
}
if area = 8
{

song = mus102

amb = amb100;
}
if area = 100
{

song = mus100;

amb = amb100;
}
if area = 102
{

song = mus102;

amb = amb102;
}
if area = 103 || area = 104
{

song = mus103;

amb = amb100;
}

if area = 104
{
song = mus107;

amb = amb100;

}

if area = 106//inverted desert
{

song = mus3b;

amb = amb3;
}

if area = 107//inverted frozen city
{

song = mus5b;

amb = amb5;
}

if area = 101//inverted frozen city
{

song = mus101;

amb = amb101;
}

if area = 111//inverted crystal caves
{

song = mus104;//cursed caves

amb = amb104;//cursed caves
}

if area = 112//inverted labs
{

song = mus106b;//popoland

amb = amb106;//popoland
}

if area = 113//banditland
{
song = musThemeP

amb=amb0b
}
snd_loop(song)
snd_loop(amb)


audio_master_gain(max(0,sqrt(UberCont.opt_sfxvol)))

audio_sound_gain(song,max(0,sqrt(UberCont.opt_musvol)),0);

audio_sound_gain(amb,max(0,sqrt(UberCont.opt_ambvol)),0);

audio_sound_gain(sndBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
//audio_sound_gain(sndVaultBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if song=sndBossWin
//{
//sound_discard(song);
//sound_discard(amb);
//}
//else{
//sound_delete(song)
//sound_delete(amb)}

//optimise sound_discard(song)
//optimise sound_discard(amb)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
