<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSlider</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>option</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,-1,x,y)
draw_set_color(c_gray)
draw_rectangle(x,y+1,x+UberCont.opt_musvol*100,y+6,0)

//slider
if mouse_check_button(mb_left) and mouse_x &gt; x-2 and mouse_x &lt; x+100 and mouse_y &gt; y and mouse_y &lt; y+8
{
UberCont.opt_musvol = round((mouse_x-x)/5)*5/100

if UberCont.opt_musvol &lt; 0
UberCont.opt_musvol = 0;

with MusCont
{
audio_master_gain(max(0,sqrt(max(0,UberCont.opt_sfxvol) )));

audio_sound_gain(song,max(0,sqrt(max(0,UberCont.opt_musvol) )),0);

audio_sound_gain(amb,max(0,sqrt(max(0,UberCont.opt_ambvol) )),0);

//audio_sound_gain(sndBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
}
}

//button
if mouse_check_button_pressed(mb_left) and mouse_x &gt; x+103 and mouse_x &lt; x+113 and mouse_y &gt; y and mouse_y &lt; y+8
{
if UberCont.opt_musvol &gt; 0
UberCont.opt_musvol -= 0.05

if UberCont.opt_musvol &lt; 0
UberCont.opt_musvol = 0;

with MusCont
{
audio_master_gain(max(0,sqrt(max(0,UberCont.opt_sfxvol) )));

audio_sound_gain(song,max(0,sqrt(max(0,UberCont.opt_musvol) )),0);

audio_sound_gain(amb,max(0,sqrt(max(0,UberCont.opt_ambvol) )),0);

//audio_sound_gain(sndBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
}
}
if mouse_check_button_pressed(mb_left) and mouse_x &gt; x+113 and mouse_x &lt; x+123 and mouse_y &gt; y and mouse_y &lt; y+8
{
if UberCont.opt_musvol &lt; 1
UberCont.opt_musvol += 0.05

if UberCont.opt_musvol &lt; 0
UberCont.opt_musvol = 0;

with MusCont
{
audio_master_gain(max(0,sqrt(max(0,UberCont.opt_sfxvol) )));

audio_sound_gain(song,max(0,sqrt(max(0,UberCont.opt_musvol) )),0);

audio_sound_gain(amb,max(0,sqrt(max(0,UberCont.opt_ambvol) )),0);

//audio_sound_gain(sndBossWin,max(0,sqrt(UberCont.opt_musvol)),0);
}
}


UberCont.opt_sfxvol=max(0,UberCont.opt_sfxvol)

UberCont.opt_musvol=max(0,UberCont.opt_musvol)

UberCont.opt_ambvol=max(0,UberCont.opt_ambvol)


x=round(view_xview+view_wview/2+8)
y=round(view_yview+40)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
